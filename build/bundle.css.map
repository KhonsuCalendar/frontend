{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Day.svelte",
    "Month.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Month from './Month.svelte';\n</script>\n\n<main>\n    <Month />\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 99%;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>",
    "<script>\n    import {afterUpdate, beforeUpdate} from \"svelte\";\n    import { Col } from \"sveltestrap\";\n    import moment from \"moment\";\n\n    let phase = \"waiting\";\n\n    const phases = {\n        \"Full moon\": \"ðŸŒ•\",\n        \"New Moon\": \"ðŸŒ‘\"\n    }\n\n    //TODO: implement this function and make sure it passes phase down to Day component\n    let checkPhase = async(date) => {\n        const URL = \"https://khonsu.aviananalyst.tk/day/?date=\"\n        let parent_response = await fetch(URL + date.format(\"YYYY-MM-DD[T00:00:00]\"))\n            .then(response => response.json())\n            .then(data => phase = data)\n            .finally(() => console.log(\"finished\"))\n        console.log(phase)\n\n        console.log(\"Fetching from \" + URL + date.toISOString())\n        // return response.data\n    }\n    export let day;\n    export let fade = true;\n    $: cellClass = fade ? \"active\" : \"inactive\";\n    afterUpdate( () => {\n        checkPhase(moment(day));\n        console.log(moment(day));\n    })\n</script>\n\n<Col style=\"padding: 0;\">\n    <div class=\"day\">\n        <h4 class=\"{cellClass} pt-4 pb-2\">{day.getDate()}</h4>\n        {#if phase in phases}\n            <p>{phases[phase]}</p>\n        <!--{:else}-->\n        <!--    <p style=\"display: none;\">No events</p>-->\n        <!--    <p>No events</p>-->\n        {/if}\n    </div>\n</Col>\n\n<style>\n    p {\n        font-size: 1rem;\n    }\n\n    h1 {\n        font-size: 1.5rem;\n    }\n\n    .day {\n        border-color: lightcoral;\n        border-style: solid;\n        min-height: 120px;\n    }\n\n    .active {\n\n    }\n    .inactive {\n        color: dimgray;\n    }\n</style>",
    "<script>\n    import { onMount } from 'svelte';\n    import Day from './Day.svelte';\n    import { Col, Row, Button } from 'sveltestrap';\n\n    let today = new Date();\n    export let currentMonth = today.getMonth();\n    export let currentYear = today.getFullYear();\n    let weeksOfMonth = [];\n    let firstOfMonth;\n\n    let buildMonth = (day, month, year) => {\n        weeksOfMonth = [];\n        let initial_day = new Date(year, month, day);\n        initial_day.setDate(initial_day.getDate() - initial_day.getDay());\n\n        for (let week = 0; week < 6; week++){\n            let daysOfWeek = [];\n            for (let day = 0; day < 7; day++){\n                daysOfWeek.push(new Date(initial_day));\n                initial_day.setDate(initial_day.getDate() + 1);\n            }\n            weeksOfMonth.push(daysOfWeek);\n        }\n    }\n\n    let isDayActive = (day) => {\n        console.log(currentMonth)\n        let dayMonth = day.getMonth();\n        return +dayMonth === +currentMonth;\n    }\n\n\n    let getNextMonth = () => {\n        currentYear = currentMonth === 11 ? currentYear + 1 : currentYear;\n        currentMonth += 1;\n        currentMonth %= 12;\n        firstOfMonth = new Date(currentYear, currentMonth, 1);\n        firstOfMonth = firstOfMonth.toLocaleString('default', {month: 'long'});\n        buildMonth(1, currentMonth, currentYear);\n    }\n\n    let getPreviousMonth = () => {\n        currentYear = currentMonth === 0 ? currentYear - 1 : currentYear;\n        currentMonth -= 1;\n        currentMonth %= 12;\n        firstOfMonth = new Date(currentYear, currentMonth, 1);\n        firstOfMonth = firstOfMonth.toLocaleString('default', {month: 'long'});\n        buildMonth(1, currentMonth, currentYear);\n    }\n    onMount( () => {\n        buildMonth(1, currentMonth, currentYear);\n        firstOfMonth = new Date(currentYear, currentMonth, 1);\n        firstOfMonth = firstOfMonth.toLocaleString('default', {month: 'long'});\n    }\n    )\n</script>\n\n\n<Row class=\"justify-content-center\">\n    <Col xs=\"3\">\n        <Button on:click={getPreviousMonth}>â¬…</Button>\n    </Col>\n    <Col xs=\"6\">\n        <h2>{firstOfMonth} {currentYear}</h2>\n    </Col>\n    <Col xs=\"3\">\n        <Button on:click={getNextMonth}>âž¡</Button>\n    </Col>\n</Row>\n\n<Row class=\"pb-3\">\n    <Col><h3>S</h3></Col>\n    <Col><h3>M</h3></Col>\n    <Col><h3>T</h3></Col>\n    <Col><h3>W</h3></Col>\n    <Col><h3>T</h3></Col>\n    <Col><h3>F</h3></Col>\n    <Col><h3>S</h3></Col>\n</Row>\n\n{#each weeksOfMonth as daysOfWeek}\n\t<Row class=\"flex\">\n\t{#each daysOfWeek as day}\n        <Day day=\"{day}\" fade=\"{isDayActive(day)}\" class=\"day\"/>\n    {/each}\n\t</Row>\n{/each}\n\n<style>\n    h2 {\n        color: teal;\n    }\n    .flex {\n        display: flex;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "AASC,IAAI,cAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,GAAG,CACd,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AASD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,cAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC;ACmBE,CAAC,eAAC,CAAC,AACC,SAAS,CAAE,IAAI,AACnB,CAAC,AAMD,IAAI,eAAC,CAAC,AACF,YAAY,CAAE,UAAU,CACxB,YAAY,CAAE,KAAK,CACnB,UAAU,CAAE,KAAK,AACrB,CAAC,AAKD,SAAS,eAAC,CAAC,AACP,KAAK,CAAE,OAAO,AAClB,CAAC;ACyBD,EAAE,eAAC,CAAC,AACA,KAAK,CAAE,IAAI,AACf,CAAC"
}